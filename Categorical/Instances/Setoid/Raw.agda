{-# OPTIONS --safe --without-K #-}

module Categorical.Instances.Setoid.Raw where

open import Level using (0‚Ñì)

open import Data.Product using (_,_)
open import Relation.Binary.PropositionalEquality
       renaming (refl to refl‚â°; cong to cong‚â°)
open import Relation.Binary.PropositionalEquality.Properties using (setoid)
import Relation.Binary.Reasoning.Setoid as SetoidR
open import Function.Equality as E using (Œ†) ; open Œ†
import Relation.Binary.Bundles as B
open import Data.Unit.Polymorphic using () renaming (‚ä§ to ‚ä§‚Ä≤)
open import Data.Product.Relation.Binary.Pointwise.NonDependent using (_√ó‚Çõ_)

open import Miscellany using (Function)
open import Categorical.Raw
open import Categorical.Instances.Function.Raw

Setoid : Set‚ÇÅ
Setoid = B.Setoid 0‚Ñì 0‚Ñì

open B.Setoid

infixr 0 _‚ü∂_
_‚ü∂_ : Setoid ‚Üí Setoid ‚Üí Set
_‚ü∂_ = E._‚ü∂_

-- Lift a function between values to a setoid function, using equality.
lift‚Üí : ‚àÄ {a b} ‚Üí (a ‚Üí b) ‚Üí (setoid a ‚ü∂ setoid b)
lift‚Üí f = record { _‚ü®$‚ü©_ = f ; cong = cong‚â° f }

lift‚Üí‚ÇÇ : ‚àÄ {a b c} ‚Üí (a √ó b ‚Üí c) ‚Üí (setoid a √ó‚Çõ setoid b ‚ü∂ setoid c)
lift‚Üí‚ÇÇ f = record { _‚ü®$‚ü©_ = f ; cong = Œª { (refl‚â° , refl‚â°) ‚Üí refl‚â° } }

module setoid-instances where

  instance

    products : Products Setoid
    products = record { ‚ä§ = setoid ‚ä§‚Ä≤ ; _√ó_ = _√ó‚Çõ_ }

    exponentials : Exponentials Setoid
    exponentials = record { _‚áõ_ = E._‚á®_ }

    import Data.Bool as Bool
    open Bool using () renaming (false to ùïó; true to ùï•)

    boolean : Boolean Setoid
    boolean = record { Bool = setoid Bool.Bool }

    -- boolean : Boolean Setoid
    -- boolean = record { Bool = setoid (Lift o B.Bool) }

    category : Category _‚ü∂_
    category = record { id = E.id ; _‚àò_ = E._‚àò_ }

    open import Data.Product.Function.NonDependent.Setoid

    !‚ü∂ : {a : Setoid} ‚Üí (a ‚ü∂ ‚ä§)
    !‚ü∂ = record { _‚ü®$‚ü©_ = ! ; cong = Œª _ ‚Üí refl‚â° }

    monoidal : Monoidal _‚ü∂_
    monoidal = record
                 { _‚äó_ = _√ó-‚ü∂_
                 ; unitor·µâÀ° = proj‚ÇÇ‚Çõ
                 ; unitor·µâ ≥ = proj‚ÇÅ‚Çõ
                 ; unitor‚Å±À° = < !‚ü∂ , id >‚Çõ
                 ; unitor‚Å± ≥ = < id , !‚ü∂ >‚Çõ
                 ; assocÀ° = < id √ó-‚ü∂ proj‚ÇÅ‚Çõ , proj‚ÇÇ‚Çõ ‚àò proj‚ÇÇ‚Çõ >‚Çõ
                 ; assoc ≥ = < proj‚ÇÅ‚Çõ ‚àò proj‚ÇÅ‚Çõ , proj‚ÇÇ‚Çõ √ó-‚ü∂ id >‚Çõ
                 ; ! = E.const tt    -- move to Cartesian
                 }

    braided : Braided _‚ü∂_
    braided = record { swap = swap‚Çõ }

    cartesian : Cartesian _‚ü∂_
    cartesian = record { exl = proj‚ÇÅ‚Çõ ; exr = proj‚ÇÇ‚Çõ ; dup = < id , id >‚Çõ }

    closed : Closed _‚ü∂_
    closed = record { _‚ü¥_ = Œª f h ‚Üí
      record { _‚ü®$‚ü©_ = Œª g ‚Üí h ‚àò g ‚àò f
             ; cong  = Œª g‚ÇÅ‚âàg‚ÇÇ ‚Üí cong h ‚àò g‚ÇÅ‚âàg‚ÇÇ ‚àò cong f
             }
      }

    logic : Logic _‚ü∂_
    logic = record
              { false = lift‚Üí false
              ; true  = lift‚Üí true
              ; not   = lift‚Üí not
              ; ‚àß     = lift‚Üí‚ÇÇ ‚àß
              ; ‚à®     = lift‚Üí‚ÇÇ ‚à®
              ; xor   = lift‚Üí‚ÇÇ xor
              ; cond  = record
                 { _‚ü®$‚ü©_ = cond
                 ; cong  = Œª { {ùïó , a‚ÇÅ , b‚ÇÅ} {.ùïó , a‚ÇÇ , b‚ÇÇ} (refl‚â° , a‚ÇÅ‚âàa‚ÇÇ , b‚ÇÅ‚âàb‚ÇÇ) ‚Üí a‚ÇÅ‚âàa‚ÇÇ
                             ; {ùï• , a‚ÇÅ , b‚ÇÅ} {.ùï• , a‚ÇÇ , b‚ÇÇ} (refl‚â° , a‚ÇÅ‚âàa‚ÇÇ , b‚ÇÅ‚âàb‚ÇÇ) ‚Üí b‚ÇÅ‚âàb‚ÇÇ }
                 }
              }

