{-# OPTIONS --safe --without-K #-}

module Ty.Raw where

open import Data.Bool using (if_then_else_) renaming (false to ùïó; true to ùï•)
open import Data.Product using (_,_)
open import Data.String using (String; parens; _++_)

open import Categorical.Raw
open import Categorical.Instances.Function.Raw

infixr 2 _`√ó_
data Ty : Set where
  `‚ä§    : Ty
  `Bool : Ty
  _`√ó_  : (x : Ty) (y : Ty) ‚Üí Ty

private variable A B C D : Ty

‚ü¶_‚üß·µó : Ty ‚Üí Set
‚ü¶ `‚ä§ ‚üß·µó     = ‚ä§
‚ü¶ œÉ `√ó œÑ ‚üß·µó = ‚ü¶ œÉ ‚üß·µó √ó ‚ü¶ œÑ ‚üß·µó
‚ü¶ `Bool ‚üß·µó  = Bool

-- Currently unused, but seems useful
showTy : ‚ü¶ A ‚üß·µó ‚Üí String
showTy = go ùï•
 where
   -- Flag says we're in the left part of a pair
   go : Bool ‚Üí ‚ü¶ A ‚üß·µó ‚Üí String
   go {`‚ä§} _ tt = "tt"
   go {`Bool} _ b = show b
   go {_ `√ó _} p (x , y) = (if p then parens else id) (go ùï• x ++ "," ++ go ùïó y)


infix 0 _‚á®_
record _‚á®_ (A B : Ty) : Set where
  constructor mk
  field
    ‚ü¶_‚üß : ‚ü¶ A ‚üß·µó ‚Üí ‚ü¶ B ‚üß·µó

module ty-instances where

  instance

    products : Products Ty
    products = record { ‚ä§ = `‚ä§ ; _√ó_ = _`√ó_ }

    boolean : Boolean Ty
    boolean = record { Bool = `Bool }

    H‚Çí : Homomorphism‚Çí Ty Set
    H‚Çí = record { F‚Çí = ‚ü¶_‚üß·µó }

    category : Category _‚á®_
    category = record { id = mk id ; _‚àò_ = Œª { (mk g) (mk f) ‚Üí mk (g ‚àò f) } }

    monoidal : Monoidal _‚á®_
    monoidal = record
      { _‚äó_      = Œª (mk f) (mk g) ‚Üí mk (f ‚äó g)
      ; !        = mk !
      ; unitor·µâÀ° = mk unitor·µâÀ°
      ; unitor·µâ ≥ = mk unitor·µâ ≥
      ; unitor‚Å±À° = mk unitor‚Å±À°
      ; unitor‚Å± ≥ = mk unitor‚Å± ≥
      ; assoc ≥   = mk assoc ≥
      ; assocÀ°   = mk assocÀ°
      }

    braided : Braided _‚á®_
    braided = record { swap = mk swap }

    cartesian : Cartesian _‚á®_
    cartesian = record { exl = mk exl ; exr = mk exr ; dup = mk dup }

    logic : Logic _‚á®_
    logic = record { false = mk false ; true = mk true
                   ; ‚àß = mk ‚àß ; ‚à® = mk ‚à® ; xor = mk xor ; not = mk not
                   ; cond = mk cond
                   }


-- Miscellaneous utilities, perhaps to move elsewhere
module TyUtils {‚Ñì} {_‚á®_ : Ty ‚Üí Ty ‚Üí Set ‚Ñì} (let infix 0 _‚á®_; _‚á®_ = _‚á®_) where

  open import Data.Nat
  open ty-instances using (products)

  module _ ‚¶É _ : Braided ‚¶É products ‚¶Ñ _‚á®_ ‚¶Ñ where

    -- Todo: rename
    replicate‚Ä≤ : ‚àÄ n ‚Üí (‚ä§ ‚á® A) ‚Üí (‚ä§ ‚á® V A n)
    replicate‚Ä≤ zero    a = !
    replicate‚Ä≤ (suc n) a = a ‚¶Ç replicate‚Ä≤ n a

    shiftR : Bool √ó A ‚á® A √ó Bool
    shiftR {`‚ä§}     = swap
    shiftR {`Bool}  = id
    shiftR {_ `√ó _} = assocÀ° ‚àò second shiftR ‚àò assoc ≥ ‚àò first shiftR ‚àò assocÀ°

    -- i , (u , v)
    -- (i , u) , v
    -- (u‚Ä≤ , m) , v
    -- u‚Ä≤ , (m , v)
    -- u‚Ä≤ , (v‚Ä≤ , o)
    -- (u‚Ä≤ , v‚Ä≤) , o

    shiftL : A √ó Bool ‚á® Bool √ó A
    shiftL {`‚ä§}     = swap
    shiftL {`Bool}  = id
    shiftL {_ `√ó _} = assoc ≥ ‚àò first shiftL ‚àò assocÀ° ‚àò second shiftL ‚àò assoc ≥

    -- (u , v) , i
    -- u , (v , i)
    -- u , (m , v‚Ä≤)
    -- (u , m) , v‚Ä≤
    -- (o , u‚Ä≤) , v‚Ä≤
    -- o , (u‚Ä≤ , v‚Ä≤)

  module _ ‚¶É _ : Cartesian ‚¶É products ‚¶Ñ _‚á®_ ‚¶Ñ where

    shiftR‚áÉ : Bool √ó A ‚á® A
    shiftR‚áÉ = exl ‚àò shiftR

    shiftL‚áÉ : A √ó Bool ‚á® A
    shiftL‚áÉ = exr ‚àò shiftL

    module _ ‚¶É _ : Logic _‚á®_ ‚¶Ñ where

      cond·µÄ : (A √ó A) √ó Bool ‚á® A  -- false , true

      cond·µÄ {  `‚ä§  } = !
      cond·µÄ {`Bool } = ‚à® ‚àò (‚àß ‚äó ‚àß ‚àò first not) ‚àò transpose ‚àò second dup
      cond·µÄ {_ `√ó _} = (cond·µÄ ‚äó cond·µÄ) ‚àò transpose ‚àò (transpose ‚äó dup)

      -- -- `Bool
      -- (e , t) , c
      -- (e , t) , (c , c)
      -- (e , c) , (t , c)
      -- (e , not c) , (t , c)
      -- e ‚àß not c , t ‚àß c
      -- (e ‚àß not c) ‚à® (t ‚àß c)

      -- _ `√ó _:
      -- ((e , e‚Ä≤) , (t , t‚Ä≤)) , c
      -- ((e , t) , (e‚Ä≤ , t‚Ä≤)) , (c , c)
      -- ((e , t) , c) , ((e‚Ä≤ , t‚Ä≤) , c)
      -- r , r‚Ä≤
