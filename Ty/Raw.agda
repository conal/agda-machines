{-# OPTIONS --safe --without-K #-}

module Ty.Raw where

open import Level using (0‚Ñì)
open import Data.Bool using (if_then_else_)
  renaming (false to ùïó; true to ùï•)
open import Data.Bool.Show as BS
open import Data.Product using (_,_; uncurry)
open import Data.Nat
open import Data.String using (String; parens; _++_)
open import Relation.Binary.PropositionalEquality

open import Categorical.Raw
open import Categorical.Instances.Function.Raw

infixr 2 _`√ó_
data Ty : Set where
  `‚ä§    : Ty
  `Bool : Ty
  _`√ó_  : (x : Ty) (y : Ty) ‚Üí Ty

private variable A B C D : Ty

‚ü¶_‚üß·µó : Ty ‚Üí Set
‚ü¶ `‚ä§ ‚üß·µó     = ‚ä§
‚ü¶ œÉ `√ó œÑ ‚üß·µó = ‚ü¶ œÉ ‚üß·µó √ó ‚ü¶ œÑ ‚üß·µó
‚ü¶ `Bool ‚üß·µó  = Bool

-- Currently unused, but seems useful
showTy : ‚ü¶ A ‚üß·µó ‚Üí String
showTy = go ùï•
 where
   -- Flag says we're in the left part of a pair
   go : Bool ‚Üí ‚ü¶ A ‚üß·µó ‚Üí String
   go {`‚ä§} _ tt = "tt"
   go {`Bool} _ b = BS.show b
   go {_ `√ó _} p (x , y) = (if p then parens else id) (go ùï• x ++ "," ++ go ùïó y)


infix 0 _‚á®_
record _‚á®_ (A B : Ty) : Set where
  constructor mk
  field
    ‚ü¶_‚üß : ‚ü¶ A ‚üß·µó ‚Üí ‚ü¶ B ‚üß·µó

module ty-instances where

  instance

    products : Products Ty
    products = record { ‚ä§ = `‚ä§ ; _√ó_ = _`√ó_ }

    boolean : Boolean Ty
    boolean = record { Bool = `Bool }

    H‚Çí : Homomorphism‚Çí Ty Set
    H‚Çí = record { F‚Çí = ‚ü¶_‚üß·µó }

    category : Category _‚á®_
    category = record { id = mk id ; _‚àò_ = Œª { (mk g) (mk f) ‚Üí mk (g ‚àò f) } }

    monoidal : Monoidal _‚á®_
    monoidal = record
      { _‚äó_      = Œª (mk f) (mk g) ‚Üí mk (f ‚äó g)
      ; !        = mk !
      ; unitor·µâÀ° = mk unitor·µâÀ°
      ; unitor·µâ ≥ = mk unitor·µâ ≥
      ; unitor‚Å±À° = mk unitor‚Å±À°
      ; unitor‚Å± ≥ = mk unitor‚Å± ≥
      ; assoc ≥   = mk assoc ≥
      ; assocÀ°   = mk assocÀ°
      }

    braided : Braided _‚á®_
    braided = record { swap = mk swap }

    cartesian : Cartesian _‚á®_
    cartesian = record { exl = mk exl ; exr = mk exr ; dup = mk dup }

    logic : Logic _‚á®_
    logic = record { false = mk false ; true = mk true
                   ; ‚àß = mk ‚àß ; ‚à® = mk ‚à® ; xor = mk xor ; not = mk not
                   ; cond = mk cond
                   }


